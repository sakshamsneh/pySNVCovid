ALGORITHM:
DYNAMIC NETWORK GRAPH
STEP 1- START
STEP 2- COLLECT AND LOAD DATASET/DATAFRAME.
STEP 3- CLEAN THE DATASET AND NORMALIZE NUMERICAL DATA.
STEP 4- CONVERT DATE TYPE DATA TO SINGLE FORMAT.
STEP 5- SELECT COLUMNS IN REQUIRED ORDER FOR NETWORK GRAPH.
STEP 6- SPECIFY THE GRAPH COLORS AS COLOR_FIELD.
    STEP 6.1- FOR EACH VALUE TYPE SELECT CUSTOM COLOR.
    STEP 6.2- GENERATE RANDOM COLORS FOR UNSPECIFIED TYPES.
STEP 7- SPECIFY START AND END DATE RANGE FOR GRAPH.
STEP 8- CREATE BLANK NETWORKX GRAPH G.
    STEP 8.1- ADD ALL ROWS AS NODES.
    STEP 8.2- CREATE EDGE BETWEEN TWO NODES IF THEY HAVE SAME VALUE IN SELECTED COLUMNS.
    STEP 8.3- ADD NODE COLORS FROM COLOR_FIELD.
    STEP 8.4- ADD CREATED NODES AND EDGES TO G.
STEP 9- SAVE G IN GEXF FORMAT.
STEP 10- UTILISE THE GEXF FILE.
STEP 11- STOP.

STATIC GRAPH
STEP 1- START
STEP 2- COLLECT AND LOAD THE DATASET/DATAFRAME.
STEP 3- CLEAN THE DATASET AND NORMALIZE NUMERICAL DATA.
STEP 4- CONVERT DATE TYPE DATA TO SINGLE FORMAT.
STEP 5- SELECT STATIC GRAPH TYPE.
STEP 6- SELECT COLUMNS FOR STATIC GRAPH.
    STEP 6.1- IF GRAPH TYPE IS PIE SELECT SINGLE COLUMN.
    STEP 6.2- ELSE SELECT MULTIPLE COLUMNS IN ANY ORDER.
    STEP 6.3- SPECIFY UNIQUE VALUES OF EACH COLUMN IF REQUIRED.
STEP 7- SPECIFY GRAPH OPTIONS.
    STEP 7.1- DISPLAY LEGEND.
    STEP 7.2- SHOW SUBPLOTS OR STACKED GRAPH.
STEP 8- DISPLAY STATIC GRAPH.
STEP 9- SAVE GRAPH WITH DETAILS IN PDF FORMAT.
STEP 10- STOP.


PSEUDOCODE:
DYNAMIC NETWORK GRAPH
import pandas, networkx
dataframe=input(data)
for column in dataframe:
    if column is date:
        col=col.format("%d/%m/%Y")
col_list=input()
for unique(col_list):
    color_list=input()
    if color_list = blank:
        color_list=random()
startdate, enddate=input()
G=networkx.graph()
for row in dataframe:
    color=get(color_list).format("rgba")
    G.add_node(row[id], startdate, enddate, color)
    for row2 in dataframe:
        if row[col_list]=row2[col_list]:
            G.add_edge(row[id], row2[id])
save G as gexf

STATIC GRAPH
import pandas
dataframe=input(data)
for column in dataframe:
    if column is date:
        col=col.format("%d/%m/%Y")
graph_type=input()
column_count=count(col in dataframe)
if graph_type=pie:
    column_count=1
for col in dataframe:
    masklist+=input(column values)
col_list=input(size=column_count)
select option:
    display legend
    graph subplot or stacked
    if graph_type=pie:
        subplot=true, stacked=false
graph=dataframe[masklist].plot(col_list, option)
graph.show()
save=input()
if save=true:
    save graph as pdf


PROCESS:
Download dataset in DOWNLOAD Tab or load in SELECT Tab
Select column to create dynamic graph: gender
Select color column and specify the colors: currentstatus
    Recovered:red
    Hospitalized:green
    Deceased:blue
    Migrated:orange
Select date range from start to end: 2020-03-02 to 2020-04-02
Generated graph details:
    Name: pySNV
    Type: Graph
    Number of nodes: 2547
    Number of edges: 5080
    Average degree:   3.9890
Launch GEPHI in DISPLAY Tab
Calculate graph statistics from Stats tab
Enable timeline in Gephi
Set slider size & mode
Play the timeline to see dynamic graph
Go to Preview Tab and export as pdf
In STATIC GRAPH Tab, select graph type: pie
Select columns and their values as masklist:    currentstatus: Hospitalized,Deceased
                                                detectedstate: Kerala,Delhi
Set options Legend, Subplot or Stacked: Legend:True, Subplot:True, Stacked:False
Generate graph and view input
Double Click to save the graph as pdf

RESULT:
pdf
pdf